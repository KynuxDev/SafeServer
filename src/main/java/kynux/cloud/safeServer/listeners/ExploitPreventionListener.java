package kynux.cloud.safeServer.listeners;

import kynux.cloud.safeServer.BlockedItems;
import kynux.cloud.safeServer.SafeServer;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPistonExtendEvent;
import org.bukkit.event.block.BlockPistonRetractEvent;
import org.bukkit.event.block.BlockRedstoneEvent;
import org.bukkit.event.entity.EntityExplodeEvent;
import org.bukkit.event.inventory.InventoryMoveItemEvent;
import org.bukkit.event.vehicle.VehicleMoveEvent;
import org.bukkit.inventory.ItemStack;

public class ExploitPreventionListener implements Listener {

    private final SafeServer plugin;

    public ExploitPreventionListener(SafeServer plugin) {
        this.plugin = plugin;
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onPistonExtend(BlockPistonExtendEvent event) {
        for (Block block : event.getBlocks()) {
            if (BlockedItems.isBlocked(new ItemStack(block.getType()))) {
                event.setCancelled(true);
                return;
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onPistonRetract(BlockPistonRetractEvent event) {
        for (Block block : event.getBlocks()) {
            if (BlockedItems.isBlocked(new ItemStack(block.getType()))) {
                event.setCancelled(true);
                return;
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onEntityExplode(EntityExplodeEvent event) {
        event.blockList().removeIf(block -> BlockedItems.isBlocked(new ItemStack(block.getType())));
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onInventoryMoveItem(InventoryMoveItemEvent event) {
        if (BlockedItems.isBlocked(event.getItem())) {
            event.setCancelled(true);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onVehicleMove(VehicleMoveEvent event) {
        Material vehicleType = event.getVehicle().getType().name().contains("MINECART") ? 
                Material.valueOf(event.getVehicle().getType().name()) : null;
        
        if (vehicleType != null && BlockedItems.isBlocked(vehicleType)) {
            event.getVehicle().remove();
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    public void onBlockRedstone(BlockRedstoneEvent event) {
        if (event.getBlock().getType() == Material.TNT) {
            event.setNewCurrent(0);
        }
    }
}
